generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model usuarios {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @db.VarChar(100)
  lastname   String?  @db.VarChar(100) 
  email      String   @unique @db.VarChar(200)
  password   String   @db.VarChar(200)
  level      String   @db.VarChar(50)
  profile_image Bytes?
  default_picture String? @default("profile") @db.VarChar(50)
  accesos_directos Json? @db.JsonB
  created_at DateTime @default(now()) @db.Timestamptz
  subscriptions Suscripcion[] 
  passwordResetToken String?   @unique
  passwordResetExpires DateTime? 

  attempts login_attempts[]
  progreso ProgresoRecurso[]
}

model login_attempts {
  id          String    @id @default(uuid())
  usuarioid   String    @db.Uuid
  attemptedat DateTime  @default(now())
  success     Boolean
  ipaddress   String?
  useragent   String?
  reason      String?

  usuarios    usuarios  @relation(fields: [usuarioid], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Plan {
  id      String   @id @default(uuid()) @db.Uuid
  name    String   @unique @db.VarChar(100)
  code    String @unique @db.VarChar(100)
  price   Float

  subscriptions Suscripcion[]
}

model Suscripcion {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  planId    String   @db.Uuid
  startDate DateTime @default(now()) @db.Timestamptz
  endDate   DateTime @db.Timestamptz
  status    String   @default("pending") @db.VarChar(50) // e.g., "active", "pending", "canceled"

  usuarios usuarios @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])

  @@unique([userId, planId])
}

enum TipoTema {
  EMPRENDEDOR
  PERSONAL
}

model Tema {
  id          String      @id @default(uuid()) @db.Uuid
  nombre      String      @db.VarChar(100)
  descripcion String?
  orden       Int         
  tipo        TipoTema    @default(EMPRENDEDOR)
  
  recursos    Recurso[]
}

model Recurso {
  id      String @id @default(uuid()) @db.Uuid
  titulo  String @db.VarChar(255)
  orden   Int
  temaId  String @db.Uuid
  tema    Tema   @relation(fields: [temaId], references: [id])
  
  // Relations to other content models
  video    Video?
  pdf      Pdf?
  preguntas Pregunta[]
  
  // Progress
  progreso ProgresoRecurso[]
  
  @@unique([temaId, orden])
}

model Video {
  id        String  @id @default(uuid()) @db.Uuid
  url       String  @db.VarChar(255)
  recursoId String  @unique @db.Uuid
  recurso   Recurso @relation(fields: [recursoId], references: [id], onDelete: Cascade)
}

model Pdf {
  id        String  @id @default(uuid()) @db.Uuid
  url       String  @db.VarChar(255) // URL to the PDF file
  recursoId String  @unique @db.Uuid
  recurso   Recurso @relation(fields: [recursoId], references: [id], onDelete: Cascade)
}

model Pregunta {
  id        String  @id @default(uuid()) @db.Uuid
  texto     String  @db.VarChar(255)
  opciones  Json    @db.JsonB
  respuesta String  @db.VarChar(255)
  orden     Int
  recursoId String  @db.Uuid
  recurso   Recurso @relation(fields: [recursoId], references: [id], onDelete: Cascade)

  @@unique([recursoId, orden])
}

model ProgresoRecurso {
  usuarioId   String   @db.Uuid
  recursoId   String   @db.Uuid
  
  completado  Boolean  @default(false)
  completadoEn DateTime? @db.Timestamptz
  
  usuario     usuarios  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  recurso     Recurso   @relation(fields: [recursoId], references: [id], onDelete: Cascade)
  
  // Clave compuesta para asegurar que cada usuario solo pueda tener un registro por recurso
  @@id([usuarioId, recursoId])
}